---
import { tailwindSizes } from "../utils/variables.js";

let {
  size = "lg",
  darkMode = false, // Propiedad para alternar entre el modo claro y oscuro
  colorScheme = "primary", // Permite elegir el esquema de color (primary, secondary, etc.)
  transparent = false, // Si se activa, el fondo será transparente
  shadow = false, // Si está activado, aplica una sombra al contenedor
  shadowType = "glow", // Tipo de sombra: glow, bottom, double
  rounded = false, // Si se activa, las esquinas estarán redondeadas
  borderRadius = "rounded-lg", // Redondeo por defecto
  css = "", // estilos adicionales
} = Astro.props;

const colorVariants = {
  primary: {
    bg: darkMode ? "bg-primary-darker" : "bg-primary-lighter",
  },
  secondary: {
    bg: darkMode ? "bg-secondary-darker" : "bg-secondary-lighter",
  },
  tertiary: {
    bg: darkMode ? "bg-tertiary-darker" : "bg-tertiary-lighter",
  },
  complementary: {
    bg: darkMode ? "bg-complementary-darker" : "bg-complementary-lighter",
  },
  black: {
    bg: darkMode ? "bg-black" : "bg-black",
  },
  white: {
    bg: darkMode ? "bg-white" : "bg-white",
  },
  transparent: {
    bg: "bg-transparent", // Variación para fondo transparente
  },
};

// Obtén el tamaño según el prop 'size', con valor por defecto 'md'
const selectedSize = tailwindSizes[size] || tailwindSizes["md"];

// Seleccionamos el esquema de color
const selectedColors = colorVariants[colorScheme] || colorVariants.primary;
if (transparent) selectedColors.bg = "bg-transparent";

// Clases para sombra opcional, según el tipo de sombra seleccionado
const shadowClass = shadow ? `shadow-${shadowType}` : "";

// Clases para bordes redondeados si está activado
const roundedClass = rounded ? borderRadius : "";
---

<div
  class={`${selectedSize} flex flex-col justify-center items-center text-center p-6 ${selectedColors.bg} ${shadowClass} ${roundedClass} ${css}`}
>
  <slot />
</div>
